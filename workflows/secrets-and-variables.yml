# Nombre descriptivo del workflow
name: Secrets and Variables Example

# Se puede ejecutar manualmente para testing
on:
  # Ejecuci√≥n manual desde GitHub UI
  workflow_dispatch:
    # Inputs configurables desde la interfaz al ejecutar manualmente
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean
      custom_message:
        description: 'Custom message to display'
        required: false
        default: 'Hello from GitHub Actions!'
        type: string
  # Tambi√©n se ejecuta en push para demostrar
  push:
    branches: [main]

# Variables globales del workflow (accesibles desde todos los jobs)
env:
  # Variable simple
  WORKFLOW_NAME: "Secrets Demo"
  # Variable que usa input del workflow_dispatch
  SELECTED_ENV: ${{ github.event.inputs.environment || 'development' }}

jobs:
  # JOB 1: VARIABLES B√ÅSICAS
  basic-variables:
    runs-on: ubuntu-latest
    
    # Variables espec√≠ficas de este job
    env:
      JOB_SPECIFIC_VAR: "Solo visible en este job"
      NODE_ENV: ${{ github.event.inputs.environment || 'development' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Show GitHub context variables
        run: |
          echo "=== CONTEXTO DE GITHUB ==="
          echo "Repositorio: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Evento: ${{ github.event_name }}"
          echo "Rama: ${{ github.ref_name }}"
          echo "SHA del commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo ""
      
      - name: Show environment variables
        run: |
          echo "=== VARIABLES DE ENTORNO ==="
          echo "Workflow name: $WORKFLOW_NAME"
          echo "Selected environment: $SELECTED_ENV"
          echo "Job specific variable: $JOB_SPECIFIC_VAR"
          echo "Node environment: $NODE_ENV"
          echo ""
      
      - name: Show manual inputs (si se ejecut√≥ manualmente)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "=== INPUTS MANUALES ==="
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Debug mode: ${{ github.event.inputs.debug_mode }}"
          echo "Custom message: ${{ github.event.inputs.custom_message }}"
          echo ""

  # JOB 2: SECRETS (DATOS SENSIBLES)
  secrets-demo:
    runs-on: ubuntu-latest
    needs: basic-variables
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Using repository secrets
        env:
          # SECRETS se configuran en: Settings ‚Üí Secrets and variables ‚Üí Actions
          # Ejemplo de secrets comunes:
          
          # Secret para API keys (DEBES crear este secret en GitHub)
          API_KEY: ${{ secrets.API_KEY }}
          
          # Secret para tokens de base de datos
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          
          # GitHub token (autom√°ticamente disponible)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        run: |
          echo "=== USANDO SECRETS ==="
          echo "GitHub token disponible: ${GITHUB_TOKEN:+S√ç}"
          
          # NUNCA hagas echo directo de secrets - GitHub los oculta autom√°ticamente
          if [ -n "$API_KEY" ]; then
            echo "‚úÖ API_KEY est√° configurado (longitud: ${#API_KEY})"
          else
            echo "‚ùå API_KEY no est√° configurado"
            echo "üí° Para configurarlo: Settings ‚Üí Secrets ‚Üí Actions ‚Üí New secret"
          fi
          
          if [ -n "$DB_PASSWORD" ]; then
            echo "‚úÖ DB_PASSWORD est√° configurado"
          else
            echo "‚ùå DB_PASSWORD no est√° configurado"
          fi
          echo ""
      
      - name: Secret safety demonstration
        env:
          DEMO_SECRET: ${{ secrets.API_KEY }}
        run: |
          echo "=== SEGURIDAD DE SECRETS ==="
          # GitHub autom√°ticamente oculta secrets en los logs
          echo "Intentando mostrar secret: $DEMO_SECRET"
          echo "‚òùÔ∏è GitHub reemplaza el valor real con ***"
          echo ""

  # JOB 3: VARIABLES CONFIGURABLES
  repository-variables:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Repository variables
        env:
          # VARIABLES se configuran en: Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Variables
          # A diferencia de secrets, las variables son visibles en los logs
          
          # Variable de entorno de aplicaci√≥n
          APP_ENV: ${{ vars.APP_ENVIRONMENT }}
          
          # URL de la aplicaci√≥n seg√∫n el entorno
          APP_URL: ${{ vars.APP_URL }}
          
          # Configuraci√≥n de caracter√≠sticas
          FEATURE_FLAGS: ${{ vars.FEATURE_FLAGS }}
          
        run: |
          echo "=== VARIABLES DE REPOSITORIO ==="
          echo "App environment: ${APP_ENV:-'No configurado'}"
          echo "App URL: ${APP_URL:-'No configurado'}"
          echo "Feature flags: ${FEATURE_FLAGS:-'No configurado'}"
          echo ""
          echo "üí° Para configurar variables:"
          echo "   Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí Variables tab"
          echo ""

  # JOB 4: CONDITIONAL DEPLOYMENT
  conditional-deployment:
    runs-on: ubuntu-latest
    # Solo se ejecuta si el entorno es 'production'
    if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
    needs: [basic-variables, secrets-demo]
    
    steps:
      - name: Production deployment simulation
        env:
          DEPLOY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRODUCTION_URL: ${{ vars.APP_URL }}
        run: |
          echo "=== DEPLOYMENT CONDICIONAL ==="
          echo "üéØ Desplegando a producci√≥n..."
          echo "Environment: ${{ github.event.inputs.environment || 'main branch' }}"
          echo "URL: ${PRODUCTION_URL:-'No configurado'}"
          echo "‚úÖ Deployment simulado exitoso"
